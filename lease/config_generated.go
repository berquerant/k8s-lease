// Code generated by "goconfig -field Labels labels.Set|CleanupLease bool|Cleanup func()|LeaderElectTimeout time.Duration -option -output config_generated.go"; DO NOT EDIT.

package lease

import (
	"time"

	"k8s.io/apimachinery/pkg/labels"
)

type ConfigItem[T any] struct {
	modified     bool
	value        T
	defaultValue T
}

func (s *ConfigItem[T]) Set(value T) {
	s.modified = true
	s.value = value
}
func (s *ConfigItem[T]) Get() T {
	if s.modified {
		return s.value
	}
	return s.defaultValue
}
func (s *ConfigItem[T]) Default() T {
	return s.defaultValue
}
func (s *ConfigItem[T]) IsModified() bool {
	return s.modified
}
func NewConfigItem[T any](defaultValue T) *ConfigItem[T] {
	return &ConfigItem[T]{
		defaultValue: defaultValue,
	}
}

type Config struct {
	Labels             *ConfigItem[labels.Set]
	CleanupLease       *ConfigItem[bool]
	Cleanup            *ConfigItem[func()]
	LeaderElectTimeout *ConfigItem[time.Duration]
}
type ConfigBuilder struct {
	labels             labels.Set
	cleanupLease       bool
	cleanup            func()
	leaderElectTimeout time.Duration
}

func (s *ConfigBuilder) Labels(v labels.Set) *ConfigBuilder {
	s.labels = v
	return s
}
func (s *ConfigBuilder) CleanupLease(v bool) *ConfigBuilder {
	s.cleanupLease = v
	return s
}
func (s *ConfigBuilder) Cleanup(v func()) *ConfigBuilder {
	s.cleanup = v
	return s
}
func (s *ConfigBuilder) LeaderElectTimeout(v time.Duration) *ConfigBuilder {
	s.leaderElectTimeout = v
	return s
}
func (s *ConfigBuilder) Build() *Config {
	return &Config{
		Labels:             NewConfigItem(s.labels),
		CleanupLease:       NewConfigItem(s.cleanupLease),
		Cleanup:            NewConfigItem(s.cleanup),
		LeaderElectTimeout: NewConfigItem(s.leaderElectTimeout),
	}
}

func NewConfigBuilder() *ConfigBuilder { return &ConfigBuilder{} }
func (s *Config) Apply(opt ...ConfigOption) {
	for _, x := range opt {
		x(s)
	}
}

type ConfigOption func(*Config)

func WithLabels(v labels.Set) ConfigOption {
	return func(c *Config) {
		c.Labels.Set(v)
	}
}
func WithCleanupLease(v bool) ConfigOption {
	return func(c *Config) {
		c.CleanupLease.Set(v)
	}
}
func WithCleanup(v func()) ConfigOption {
	return func(c *Config) {
		c.Cleanup.Set(v)
	}
}
func WithLeaderElectTimeout(v time.Duration) ConfigOption {
	return func(c *Config) {
		c.LeaderElectTimeout.Set(v)
	}
}
